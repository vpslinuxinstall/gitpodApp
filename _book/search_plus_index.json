{"./":{"url":"./","title":"Introduction","keywords":"","body":"Data structure and algorithm python "},"Introduction.html":{"url":"Introduction.html","title":"Introduction to Data Structures","keywords":"","body":"Introduction Lecture "},"ArrayBasics.html":{"url":"ArrayBasics.html","title":"Array Basics","keywords":"","body":"Array basics Lecture Array Characteristics and Storage Python Python defines both an array and a list type and while they look and feel similar to one another they have their own uses. The array.array class in Python is a thin wrapper around a C array and this introduces some limitations. For example, Python arrays are homogeneous and can only hold data of a single kind. The type does take up much less space in memory than Python lists however so in general you would use an array if space was a concern or if you wanted to expose some C functionality. As mentioned in the course, Python lists are the more frequently used type and the de facto representation of an array like structure. They are a heterogeneous and contiguous data structure. Java Arrays in Java are represented by the Array class and is a homogeneous container containing a fixed number of values of a single type. Two types of arrays can be created - one containing primitive values like int or char or ones that contain objects by means of references or pointers. To declare a variable to refer to an array the type must be specified. // declares an array of integers int[] anArray; Declaring an array does not actually create the array, instead it indicates that the variable holds an array of the type that we specify. When an array is created the variable anArray holds a reference to the location in memory where the array is stored. When arrays of primitive values are created, the values are stored in the array. For objects however, the array contains references to the locations in memory where the objects are stored. JavaScript JavaScript does not have an explicit array data type and arrays are represented by the Array object which is a list like object. Array is an Object type with special constructor and accessor methods. Its prototype has methods to perform traversal and mutation operations. JavaScript arrays are heterogeneous, meaning the types of elements are not fixed and neither is the size. Unlike the description given in the course video, arrays in JavaScript are not contiguous data structures and the data stored in the array can be located in a non-contiguous location. There are several ways to create an array: var arr = new Array(1); var arr = Array(1); var arr = [1]; Since arrays are regular JavaScript objects with syntactic sugar there are some nuances to their behavior. Creating a new array does not allocate any memory and the size of an array and its corresponding length are not always the same. Consider the following snippet: var values = []; values[0] = 1; values[9] = 2; Here an array has been created and two values have been inserted at index positions 0 and 9. The length of the array here is actually 10, even though there are only 2 elements in the array. Additional Resources: MDN: Array MDN: Indexed Collections Swift The Array type in Swift is a generic, homogenous data structure containing values of a single type and is the de facto list data structure. When creating an array the type of the elements can be inferred, making type specification optional. let oddNumbers = [3, 5, 7] // Type inferred let evenNumbers: [Int] = [2, 4, 6] // Explicit type annotation In addition, arrays can be created using the literal syntax or by specifying the generic type parameters directly. To create an empty array: let vowels: [String] = [] let consonants = ArrayString>() When creating an empty array using the literal syntax the type must be explicitly specified. When an array is created a specific amount of memory is allocated to store the values. As the array begins to exceed this reserved capacity, a larger region of memory that is a multiple of the original size is allocated and the values are copied over into the new memory. This exponential growth strategy means that appending an element happens in constant time, averaging the performance of many append operations. If the desired size of the array is known beforehand, the reserveCapacity(_:) method can be used before appending to the array to avoid intermediate reallocations. Array storage can be either in contiguous or non-contiguous memory. If the underlying element is a value type then the memory allocated is guaranteed to be contiguous but if the values stored are references types (i.e, classes), then the memory can either be contiguous or an instance of NSArray if the objects stored are @objc types. Contiguous memory can be guaranteed by using the ContiguousArray type. Arrays in Swift are value types and implement copy-on-write behavior. Multiple copies of an array share the same storage until one of them is modified. When a copy is modified, the array being modified replaces its (shared) storage with a uniquely owned copy of itself. When storing value types, the value is stored directly in the array's storage. On the other hand, when reference types are stored, the array stores a pointer to the location in memory where the object is stored. Additional Resources: Array ContiguousArray "},"ArrayValue.html":{"url":"ArrayValue.html","title":"Array value","keywords":"","body":"Accessing a Value in an Array Lecture Regardless of the kind of data structure you work with, all data structures are expected to carry out four kinds of operations at minimum. In this video we look at the concepts behind array access. Array new_list = [1, 2, 3] result = new_list[10] print(result) We can only access index that array contains. The array does not contain index 10, so you will see the error like this IndexError: list index out of range. "},"ArrayOperations.html":{"url":"ArrayOperations.html","title":"Array Operations","keywords":"","body":"Array operations Lecture Operations on Arrays Python Accessing Elements Use the index operator on a list to access values using an index. Note that index values start at 0. >>> numbers = [1, 2, 3, 4, 5, 6] >>> numbers[2] 3 Using an index that is out of bounds of the current range of values results in a runtime error. >>> numbers[12] Traceback (most recent call last): File \"\", line 1, in module> IndexError: list index out of range List Length To determine the number of items in a list, use the len function. >>> len(numbers) 6 len is often used to determine the range of valid index values in a list. To avoid runtime errors it is good practice to iterate over a list with a range defined by the result of calling len instead of a hard coded constant. >>> for i in range(len(numbers)): ... print(numbers[i]) ... 1 2 3 4 5 6 List Operations To add to a list, use the append(x) method >>> numbers.append(7) To add (or concatenate) one list to another, use extend(iterable) >>> numbers.extend([8, 9, 10]) To insert an item into a list at a given position. Here the value 11 is inserted at index position 10. >>> numbers.insert(10, 11) Use the remove(x) method to remove an item from a list. remove() takes a value as an argument and removes the first element in the list that matches the argument. >>> numbers.remove(11) Searching for the position of an element in a list is possible using the index(x) >>> numbers.index(4) 3 List Membership Use the in and not in operators to test for membership in a list. >>> if 5 in numbers: print(True) True >>> if 30 not in numbers: print(True) True Python lists are mutable which means any element can be updated using the index operator along with an index position. >>> numbers[0] = 22 # Updates first element in list to 22 Additional Resources: Lists List Operations Swift Accessing Elements Accessing elements individually is generally done using subscript notation with index values starting at 0. let numbers: [Int] = [1, 2, 3, 4, 5] let firstValue = numbers[0] You can subscript an array with any integer starting from 0 up to, but not including, the count of the array. Unlike languages like Python you cannot use a negative number or an index equal to or greater than count. This triggers a runtime error. In addition to subscripting, there are several methods defined on the type that offer a degree of safety when accessing values. Use the first and last properties to get the first and last elements of an array. Both these properties return optional values so you can guard against them instead of hitting a runtime error. if let firstElement = numbers.first, let lastElement = numbers.last { print(firstElement, lastElement, separator: \", \") } To iterate over a the entire array use a `for-in` loop. ```swift for number in numbers { print(number) } You can also call enumerated() on an array to return a sequence of pairs (n, x) where n representes the index value and x represents the element. for (index, element) in numbers.enumerated() { print(\"Element \\(element) is at index position \\(index)\") } Adding and Removing Elements Arrays can only be modified if they are assigned to a variable and not a constant. let numbers = [1, 2, 3] numbers.append(4) // Cannot use mutating member on immutable value: 'numbers' is a 'let' constant Use the append(_:) method to add values to the end of a variable array var numbers = [1, 2, 3, 4, 5] numbers.append(6) When appending more than one value, you have several options. You can concatenate one array to another provided they are of the same type. let numbers = [1, 2, 3, 4, 5] numbers + [6, 7, 8] Notice that the concatenation operation is carried out an array assigned to a constant. This is because the concatenation operation does not mutate the original array and returns a new array containing values from both. To mutate the array and add multiple elements at the same time by passing another array or a sequence use the append(contentsOf:) method. var numbers = [1, 2, 3, 4, 5] numbers.append(contentsOf: [6, 7 ,8]) All of these operations add elements to the end of an array. To insert an element in the middle of an array use the insert(_:at:) method for single elements or the insert(contentsOf:at:) method for multiple elements. var numbers = [1, 2, 3, 4, 5] numbers.insert(10, at: 2) numbers.insert(contentsOf: [18, 22, 35], at: 4) To remove elements from an array there are three options. To remove a single element at an index, use the remove(at:) method. numbers.remove(at: 2) To remove multiple elements use the removeSubrange(_:) method along with a range, either the half-open range operator (.. or the closed range operator (...). numbers.removeSubrange(3...6) numbers.removeSubrange(3..7) Finally, you can use the convenience methods removeFirst() and removeLast() to remove the first and last elements in the array. numbers.removeFirst() // 1 numbers.removeLast() Querying An Array To determine the number of elements in the array use the count property let numbers = [1, 2, 3] numbers.count // 3 To determine whether an array is empty use the isEmpty property if numbers.isEmpty { // do something } Array Membership To check whether an element exists in an array, use the contains(_:) method. numbers.contains(2) You can also use contains(where:) to search for an element that satisfies a predicate. numbers.contains(where: { $0 % 2 == 0 }) To find the first instance of an element and return its index position use firstIndex(of:). numbers.firstIndex(of: 10) Similarly use lastIndex(of:) to return the last index where the specified value appears in the array. Creating Array Slices Often times you will want to extract or query only a portion of an array and you can do this using array slices. Array slices are created when a range is used with a subscript. let someNumbers = numbers[2...6] There are couple interesting points to array slices you should be aware of if you're coming from another language: Slicing an array returns a different type - ArraySlice. someNumber in the code snippet above is of type ArraySlice. ArraySlice, like Array is a generic type that infers the type of Element from the array it was dervied from. It cannot be used where the type Array is expected. In addition, array slices maintain index values of the parent array. let numbers = [1, 2, 10, 3, 18, 22, 35, 4, 5] let someNumbers = numbers[2...6] // [10, 3, 18, 22, 35] someNumbers.firstIndex(of: 18) In the code snippet above while it seems like firstIndex(of:) should return the value 2, the value returned is actually 4. This is becase someNumbers maintains the indices of its parent array. This is because array slices are acttually just views into an array. new_list = [1, 2, 3] result = new_list[0] if 1 in new_list: print(True) for n in new_list: if n == 1: print(True) break # Adding to a list new_list.append(4) new_list.extend([5, 6, 7]) # Inserting in a list new_list.insert(0, 10) # Deleting specific value in a list new_list.remove(4) "},"LinkedList.html":{"url":"LinkedList.html","title":"Linked List","keywords":"","body":"Linked list Lecture "}}