const Octokit = require('@octokit/rest');
const { EOL } = require('os');
const matcher = require('./url-matcher');
const { trimmer } = require('./trimmer');
const Promise = require('bluebird');
const { Encoder } = require('node-html-encoder');
const entityEncoder = new Encoder('entity');

const DEFAULTS = {
    showLink: true,
    reindent: true
};
const GITHUB_DEFAULTS = {
  baseUrl: 'https://api.github.com',
  userAgent: 'gitbook-plugin-github-embed'
};

module.exports = function processGithubEmbed(block) {
    if (block.args.length !== 1) {
        throw Error('Required url parameter')
    }

    const url = block.args[0];
    const pluginConfig = this.config.get('pluginsConfig.github-embed') || {};
    const { urls = [], ...pluginOptions } = pluginConfig;
    const { github = {}, ...urlConfig } = urls.find(({ regex }) => regex && url.match(regex)) || {};

    const options = {
        ...DEFAULTS,
        ...pluginOptions,
        ...urlConfig,
        ...(block.kwargs || {})
    };

    options.github = {
      ...GITHUB_DEFAULTS,
      ...github
    };

    return extractSnippet(url, options)
}

function setupGithubApiClient(options) {
    const githubClientOptions = options.github;
    const token = options.token
        || process.env['GITBOOK_EMBED_GITHUB_API_TOKEN']
        || process.env['GITHUB_API_TOKEN'];

    if (token && !('auth' in githubClientOptions)) {
        githubClientOptions.auth = `token ${token}`;
    }

    return new Octokit(githubClientOptions);
}

function extractSnippet(url, options) {
    const { request, lines, extension } = matcher(url);
    const github = setupGithubApiClient(options);
    let fileName;

    return Promise.try(() => github.repos.getContents(request))
        .then(({ data }) => {
            const { type, size, content, name } = data;

            if (type !== 'file') throw Error('Resource is not a file')
            if (size === 0) throw Error('Resource is empty')
            if (size >= 1024 * 1024) throw Error('Resource is too large to embed')
            if (!content) throw Error('No content available')

            fileName = name;

            const contents = Buffer.from(content, 'base64').toString()

            if (lines && lines[0] !== undefined) {
                const ln = contents.split(EOL);
                const start = parseInt(lines[0], 10);
                const end = lines[1] === undefined ? start : parseInt(lines[1], 10);
                const contentsWithinLines = ln.slice(start - 1, end).join(EOL);

                if (options.hideLines) {
                    return require('./hidelines')(contentsWithinLines, options.hideLines, start + 1)
                }

                return contentsWithinLines;
            }

            if (options.hideLines) {
                return require('./hidelines')(contents, options.hideLines, 2);
            }

            return contents
        })
        .then(code => {
            var trimmed = code.replace(/[\s\n\r]*$/g, '')
            var language = '';
            var link = ''

            if (options.reindent !== false) {
                trimmed = trimmer(trimmed)
            }

            if (extension) {
                language = 'lang-' + extension
            }

            if (options.showLink !== false) {
                let name = fileName;
                if (lines[0] !== undefined) {
                    if (lines[1] === undefined) {
                        name += ` (line ${lines[0]})`
                    } else {
                        name += ` (lines ${lines[0]}â€“${lines[1]})`
                    }
                }

                link = `<div class="github-embed-caption"><a title="Show Full Source of ${fileName}" href="${url}">${name}</a></div>`;
            }

            return `<pre><code class="${language}">${entityEncoder.htmlEncode(trimmed)}</code></pre>${link}`
        });
}
